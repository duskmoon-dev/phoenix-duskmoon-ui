<.dm_breadcrumb
    class={[
        "h-6",
        "bg-white text-slate-400",
        "dark:bg-gray-900 text-slate-600",
    ]}
>
    <:crumb>Hooks</:crumb>
    <:crumb>WebComponentHook</:crumb>
</.dm_breadcrumb>
<.dm_card class={[
    "w-[100%_!important] h-[calc(100vh-56px-2em)_!important] overflow-auto",
    "text-slate-900 bg-slate-50 dark:text-slate-50 dark:bg-slate-900",
]}>
    <:title class="flex flex-row justify-center items-center">
        <span class="text-4xl text-blue-600 hover:text-blue-400">
            WebComponentHook
        </span>
    </:title>
    <.dm_markdown content={"""

    Custom hook `WebComponentHook` for connect custom elements to phoenix.
    This will send and receive event to live view.

    ```js
    import "phoenix_duskmoon";
    const WebComponentHook = window.__WebComponentHook__;
    const liveSocket = new LiveSocket("/live", Socket, {hooks: { WebComponentHook }});
    ```

    Send custom events to live view:
    ```html
    <Element darkmoon-send-sync-content="load_content" phx-hook="WebComponentHook" />
    <Element darkmoon-send-sync-content="load_content;loadAccepted" phx-hook="WebComponentHook" />
    ```
    - In the first element, when element trigger customEvents `sync-content`, also use `pushEvent` send `load_content` to live view.
    - Second element are same as first, but will call `loadAccepted` on element when receive server send feedback.

    Receive live view event:
    ```html
    <Element darkmoon-receive-update_content="updateContent" phx-hook="WebComponentHook" />
    <!-- equal  -->
    <Element darkmoon-receive="update_content;updateContent" phx-hook="WebComponentHook" />
    ```
    - In this case, when live view fire `update_content` event, also trigger `updateContent` method on elmenet.
    - If value(`updateContent`) is empty, trigger a same event `update_content` on element.

    Also add css
    ```css
    import "phoenix_duskmoon/priv/static/phoenix_duskmoon.css"
    ```

    """} />
</.dm_card>
