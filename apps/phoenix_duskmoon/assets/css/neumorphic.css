:root {
  --neumorphic-color: #aaa;
  --neumorphic-text-color: #444;
  --neumorphic-light: #fff8;
  --neumorphic-dark: #3338;


  --neumorphic-size: 1;
  --neumorphic-shadow: calc(1em * var(--neumorphic-size))
      calc(1em * var(--neumorphic-size))
      calc(1em * var(--neumorphic-size) * 1.5) var(--neumorphic-dark),
    calc(1em * var(--neumorphic-size) * -1)
      calc(1em * var(--neumorphic-size) * -1)
      calc(1em * var(--neumorphic-size) * 1.5) var(--neumorphic-light);

  --neumorphic-shadow-inset: inset calc(1em * var(--neumorphic-size))
      calc(1em * var(--neumorphic-size))
      calc(1em * var(--neumorphic-size) * 1.5) var(--neumorphic-dark),
    inset calc(1em * var(--neumorphic-size) * -1)
      calc(1em * var(--neumorphic-size) * -1)
      calc(1em * var(--neumorphic-size) * 1.5) var(--neumorphic-light);

  --neumorphic-filter: drop-shadow(
      calc(1em * var(--neumorphic-size)) calc(1em * var(--neumorphic-size))
        calc(1em * var(--neumorphic-size) * 1.5) var(--neumorphic-dark)
    )
    drop-shadow(
      calc(1em * var(--neumorphic-size) * -1)
        calc(1em * var(--neumorphic-size) * -1)
        calc(1em * var(--neumorphic-size) * 1.5) var(--neumorphic-light)
    );

  --text-dark-shadow: 0.1em 0.1em 0.12em var(--neumorphic-dark);
  --text-light-shadow: -0.1em -0.1em 0.12em var(--neumorphic-light);
}


@utility neumorphic-text-* {
  text-shadow:
    calc(1rem * 0.01 * --value(integer)) calc(1rem * 0.01 * --value(integer)) calc(1rem * 0.01 * --value(integer)) var(--neumorphic-dark),
    calc(1rem * 0.01 * --value(integer) * -1) calc(1rem * 0.01 * --value(integer) * -1) calc(1rem * 0.01 * --value(integer)) var(--neumorphic-light);
}

@utility neumorphic-text-inset-* {
  color: transparent;
  background-clip: text;
  text-shadow:
    calc(1rem * 0.01 * --value(integer)) calc(1rem * 0.01 * --value(integer)) calc(1rem * 0.01 * --value(integer)) var(--neumorphic-dark),
    calc(1rem * 0.01 * --value(integer) * -1) calc(1rem * 0.01 * --value(integer) * -1) calc(1rem * 0.01 * --value(integer)) var(--neumorphic-light);
}

@utility neumorphic-shadow-* {
  box-shadow: 
    calc(1rem * --value(integer) * 0.01)
      calc(1rem * --value(integer) * 0.01)
      calc(1rem * --value(integer) * 0.01 * 1.5) 
      var(--neumorphic-dark),
    calc(1rem * --value(integer) * 0.01 * -1)
      calc(1rem * --value(integer) * 0.01 * -1)
      calc(1rem * --value(integer) * 0.01 * 1.5) 
      var(--neumorphic-light);
}


@utility neumorphic-shadow-inset-* {
  box-shadow: 
    inset calc(1rem * --value(integer) * 0.01)
      calc(1rem * --value(integer) * 0.01)
      calc(1rem * --value(integer) * 0.01 * 1.5) var(--neumorphic-dark),
    inset calc(1rem * --value(integer) * 0.01 * -1)
      calc(1rem * --value(integer) * 0.01 * -1)
      calc(1rem * --value(integer) * 0.01 * 1.5) var(--neumorphic-light);
}


@utility neumorphic-filter-* {
 filter:
    drop-shadow(
      calc(1rem * --value(integer) * 0.01) calc(1rem * --value(integer) * 0.01)
        calc(1rem * --value(integer) * 0.01 * 1.5) var(--neumorphic-dark)
    )
    drop-shadow(
      calc(1rem * --value(integer) * 0.01 * -1)
        calc(1rem * --value(integer) * 0.01 * -1)
        calc(1rem * --value(integer) * 0.01 * 1.5) var(--neumorphic-light)
    );
}

@layer components {
  .neumorphic-checkbox {
    display: inline-grid;
    place-items: center;
    position: relative;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: var(--radius-selector);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    color: var(--color-base-content);
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
    transition: background-color 0.2s, box-shadow 0.2s;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    &:before {
      --tw-content: "";
      content: var(--tw-content);
      display: block;
      width: 100%;
      height: 100%;
      rotate: 45deg;
      background-color: currentColor;
      opacity: 0%;
      transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
      transition-delay: 0.1s;
      clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
      box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      font-size: 1rem;
      line-height: 0.75;
    }
    &:focus-visible {
      outline: 2px solid var(--input-color, currentColor);
      outline-offset: 2px;
    }
    &:checked, &[aria-checked="true"] {
      background-color: var(--input-color, #0000);
      box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
      &:before {
        clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
        opacity: 100%;
        @media print {
          rotate: 0deg;
        }
        @media print {
          background-color: transparent;
        }
        @media print {
          --tw-content: "✔︎";
        }
        @media print {
          clip-path: none;
        }
        @media (forced-colors: active) {
          rotate: 0deg;
          background-color: transparent;
          --tw-content: "✔︎";
          clip-path: none;
        }
      }
    }
    &:indeterminate {
      &:before {
        rotate: 0deg;
        opacity: 100%;
        translate: 0 -35%;
        clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
      }
    }
    &:disabled {
      cursor: not-allowed;
      opacity: 20%;
    }
  }
  .neumorphic-radio {
    display: inline-grid;
    place-items: center;
    position: relative;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: calc(infinity * 1px);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    color: var(--input-color, currentColor);
    &:before {
      display: block;
      width: 100%;
      aspect-ratio: 1 / 1;
      border-radius: calc(infinity * 1px);
      --tw-content: "";
      content: var(--tw-content);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
    }
    &:focus-visible {
      outline: 2px solid currentColor;
    }
    &:checked, &[aria-checked="true"] {
      animation: radio 0.2s ease-out;
      border-color: currentColor;
      background-color: var(--neumorphic-text-color);
      &:before {
        background-color: currentColor;
        @media print {
          outline: .25rem solid;
        }
        @media print {
          outline-offset: -1rem;
        }
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
        @media (forced-colors: active) {
          outline-style: var(--tw-outline-style);
          outline-width: 1px;
          outline-offset: calc(1px * -1);
        }
      }
    }
    &:disabled {
      cursor: not-allowed;
      opacity: 20%;
    }
  }
  .neumorphic-range {
    appearance: none;
    webkit-appearance: none;
    --range-thumb: var(--color-base-100);
    --range-thumb-size: calc(var(--size-selector, 0.25rem) * 6);
    --range-progress: currentColor;
    --range-fill: 1;
    --range-p: 0.25rem;
    --range-bg: color-mix(in oklab, currentColor 10%, #0000);
    cursor: pointer;
    overflow: hidden;
    background-color: transparent;
    vertical-align: middle;
    width: clamp(3rem, 20rem, 100%);
    --radius-selector-max: calc(
    var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
  );
    border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
    border: none;
    height: var(--range-thumb-size);
    [dir="rtl"] & {
      --range-dir: -1;
    }
    &:focus {
      outline: none;
    }
    &:focus-visible {
      outline: 2px solid;
      outline-offset: 2px;
    }
    &::-webkit-slider-runnable-track {
      width: 100%;
      background-color: var(--range-bg);
      border-radius: var(--radius-selector);
      height: calc(var(--range-thumb-size) * 0.5);
      @media (forced-colors: active) {
        border: 1px solid;
      }
    }
    &::-webkit-slider-thumb {
      position: relative;
      box-sizing: border-box;
      border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
      background-color: currentColor;
      height: var(--range-thumb-size);
      width: var(--range-thumb-size);
      border: var(--range-p) solid;
      appearance: none;
      webkit-appearance: none;
      top: 50%;
      color: var(--range-progress);
      transform: translateY(-50%);
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
    }
    &::-moz-range-track {
      width: 100%;
      background-color: var(--range-bg);
      border-radius: var(--radius-selector);
      height: calc(var(--range-thumb-size) * 0.5);
      @media (forced-colors: active) {
        border: 1px solid;
      }
    }
    &::-moz-range-thumb {
      position: relative;
      box-sizing: border-box;
      border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
      background-color: currentColor;
      height: var(--range-thumb-size);
      width: var(--range-thumb-size);
      border: var(--range-p) solid;
      top: 50%;
      color: var(--range-progress);
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
    }
    &:disabled {
      cursor: not-allowed;
      opacity: 30%;
    }
  }
}
