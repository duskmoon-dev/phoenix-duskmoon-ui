#![allow(non_camel_case_types)]

use yew::prelude::*;

#[derive(Properties, Clone, PartialEq)]
pub struct BSIconProps {
    #[prop_or_default]
    pub id: AttrValue,
    /// CSS classes to add to the anchor element (optional).
    #[prop_or_default]
    pub class: Classes,
    #[prop_or(AttrValue::from("1em"))]
    pub size: AttrValue,
    #[prop_or(AttrValue::from("currentColor"))]
    pub color: AttrValue,
    #[prop_or_default]
    pub name: AttrValue,
}

pub const BSI_NAMES: [&str; <%= icon_names |> length() %>] = [
<%= for name <- icon_names do %>  "<%= name %>",
<% end %>
];

<%= for {name, idx} <- Enum.with_index(icons) do %>
#[function_component(BS_<%= Enum.at(icon_names, idx) %>)]
pub fn r#bsi_<%= String.replace(name, "-", "_") %>(props: &BSIconProps) -> Html {
  let owned_props = props.clone();

  html! {
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" id={owned_props.id} class={owned_props.class} width={owned_props.size} fill={owned_props.color}>
      <%= File.read!(Application.app_dir(:phoenix_webcomponent, "priv/bsi/svg/#{name}.svg")) |> String.replace(~r/<svg[^>]+>/, "") |> String.replace("</svg>", "") |> String.trim() %>
    </svg>
  }
}

<% end %>

#[function_component(BSIcon)]
pub fn r#bs_icon(props: &BSIconProps) -> Html {
  let owned_props = props.clone();
  match owned_props.name {
<%= for name <- icon_names do %>    implicit_clone::unsync::IString::Static("<%= name %>") => html! {
      <BS_<%= name %> ..owned_props />
    },
<% end %>
    _ => html! {},
  }
}

